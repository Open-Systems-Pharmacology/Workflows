name: 'Get Tools Versions'
description: 'Get OSPSuite tool names and versions'
author: 'pchelle'

inputs:
  tools-path: 
    description: 'Path a csv file defining the tools and versions to install'
    required: true
outputs:
  pk-sim: 
    description: "PK Sim version"
    value: ${{ steps.tools-versions.outputs.pk-sim  }}
  qualification-framework: 
    description: "Qualification Framework version"
    value: ${{ steps.tools-versions.outputs.qualification-framework  }}
  qualification-runner:
    description: "Qualification Runner version"
    value: ${{ steps.tools-versions.outputs.qualification-runner  }}
  ospsuite-r: 
    description: "OSPSuite-R package version"
    value: ${{ steps.tools-versions.outputs.ospsuite-r  }}
  reporting-engine: 
    description: "OSPSuite.ReportingEngine R package version"
    value: ${{ steps.tools-versions.outputs.reporting-engine  }}
  rutils:
    description: "OSPSuite.RUtils R package version"
    value: ${{ steps.tools-versions.outputs.rutils  }}
  tlf: 
    description: "TLF-Library R package version"
    value: ${{ steps.tools-versions.outputs.tlf  }}
  rsharp: 
    description: "rSharp R package version"
    value: ${{ steps.tools-versions.outputs.rsharp  }}
  r: 
    description: "R version"
    value: ${{ steps.tools-versions.outputs.r  }}
  tools-table:
    description: "Markdown table corresponding to csv tools information"
    value: ${{ steps.tools-table.outputs.table  }}
  
runs:
  using: "composite"
  steps:
    - id: tools-versions
      name: Export versions of certain tools
      run: |
        # Default R version
        echo "r=latest" >> $GITHUB_OUTPUT
        # Process each line after header assumes columns are Name, Version and URL
        tail -n +2 "${{ inputs.tools-path }}" | while IFS=',' read -r val1 val2 val3
        do
          # Save versions corresponding to appropriate name
          if [[ "$val1" == "PK-Sim" ]]; then
            echo "pk-sim=$val2" >> $GITHUB_OUTPUT
          fi
          if [[ "$val1" == "Qualification Framework" ]]; then
            echo "qualification-framework=$val2" >> $GITHUB_OUTPUT
          fi
          if [[ "$val1" == "Qualification Runner" ]]; then
            echo "qualification-runner=$val2" >> $GITHUB_OUTPUT
          fi
          if [[ "$val1" == "ospsuite-R" ]]; then
            echo "ospsuite-r=$val2" >> $GITHUB_OUTPUT
          fi
          if [[ "$val1" == "Reporting Engine" ]]; then
            echo "reporting-engine=$val2" >> $GITHUB_OUTPUT
          fi
          if [[ "$val1" == "RUtils" ]]; then
            echo "rutils=$val2" >> $GITHUB_OUTPUT
          fi
          if [[ "$val1" == "TLF" ]]; then
            echo "tlf=$val2" >> $GITHUB_OUTPUT
          fi
          if [[ "$val1" == "rSharp" ]]; then
            echo "rsharp=$val2" >> $GITHUB_OUTPUT
          fi
          if [[ "$val1" == "R" ]]; then
            echo "r=$val2" >> $GITHUB_OUTPUT
          fi
        done
      shell: bash
      
    - id: save-tools-json
      name: Save tools.json
      run: |
        # Read header
        IFS=',' read -r col1 col2 col3 < "${{ inputs.tools-path }}"
        col3=$(echo "$col3" | tr -d '\r\n')
        # Process each line and convert to JSON
        tail -n +2 "${{ inputs.tools-path }}" | while IFS=',' read -r val1 val2 val3
        do
          val3=$(echo "$val3" | tr -d '\r\n')
          echo "{\"$col1\": \"$val1\", \"$col2\": \"$val2\", \"$col3\": \"$val3\"}"
        done | jq -s '.' > "tools.json"
      shell: bash

    - id: tools-data
      name: Output tools data for table conversion
      run: |
        echo "json=$(jq -c . tools.json)" >> $GITHUB_OUTPUT
      shell: bash

    - id: tools-table
      name: Markdown table for tools
      uses: buildingcash/json-to-markdown-table-action@v1 
      with: 
        json: "${{ steps.tools-data.outputs.json }}"
   
