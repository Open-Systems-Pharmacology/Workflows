name: "codesigner"
description: "GitHub Action for CodeSigner by SSL.com"

inputs:
  command:
    description: "CodeSignTool Command"
    required: true
    default: "sign"
  file_path:
    description: "Path of code object to be signed. Mandatory for the single sign mode."
    required: false
  input_dir_path:
    description: "Input directory for code objects to be signed, have hashes computed, or pick unsigned files and corresponding hashes for signing."
    required: false
  output_dir_path:
    description: "Directory where signed code object(s) will be written (if override is set to false)"
    required: false
  malware_block:
    description: "Scans your file for any possible malware in order to avoid code compromise and prevents signing of code if malware is detected."
    required: false
    default: "false"
  override:
    description: "Overrides the input file after signing, if this argument is set to true and no output_dir_path argument was passed"
    required: false
    default: "true"
  clean_logs:
    description: "Clean log files after code signing operations"
    required: false
    default: "false"
  jvm_max_memory:
    description: "Maximumx JVM heap size"
    required: false
    default: "1024M"
  signing_method:
    description: "Code signing method. Default is v1. Supported values: v1, v2"
    required: false
    default: "v1"

runs:
  using: "composite"
  steps:
      - name: Sign Artifact with CodeSignTool
        uses: sslcom/esigner-codesign@v1.3.1
        with:
          # CodeSignTool Commands:
          # - get_credential_ids: Output the list of eSigner credential IDs associated with a particular user.
          # - credential_info: Output key and certificate information related to a credential ID.
          # - sign: Sign and timestamp code object.
          # - batch_sign: Sign and timestamp multiple code objects with one OTP.
          # - hash: Pre-compute hash(es) for later use with batch_hash_sign command.
          # - batch_sign_hash: Sign hash(es) pre-computed with hash command.
          command: ${{ inputs.command }}

          # SSL.com account username..
          username: ${{secrets.ES_USERNAME}}

          # SSL.com account password.
          password: ${{secrets.ES_PASSWORD}}

          # Credential ID for signing certificate.
          credential_id: ${{secrets.ES_CREDENTIAL_ID}}

          # OAuth TOTP Secret (https://www.ssl.com/how-to/automate-esigner-ev-code-signing)
          totp_secret: ${{secrets.ES_TOTP_SECRET}}

          # Path of code object to be signed.
          # Supported File Types: acm, ax, bin, cab, cpl, dll, drv, efi, exe, mui, ocx, scr, sys, tsp, msi, ps1, ps1xml, js, vbs, wsf, jar
          file_path: ${{ inputs.file_path }}

          # Input directory for code objects to be signed, have hashes computed, or pick unsigned files and corresponding hashes for signing.
          dir_path: ${{ inputs.input_dir_path }}

          # Directory where signed code object(s) will be written.
          output_path: ${{ inputs.output_dir_path }}

          # Scans your file for any possible malware in order to avoid code compromise and prevents signing of code if malware is detected.
          # On batch_sign command: If you are getting 'Error: hash needs to be scanned first before submitting for signing: <hash_value>', you can set this value to true
          malware_block: ${{ inputs.malware_block }}
    
          # Overrides the input file after signing, if this parameter is set and no -output_dir_path parameter
          override: ${{ inputs.override }}
    
          # Clean log files after code signing operations
          clean_logs: ${{ inputs.clean_logs }}

          # Maximumx JVM heap size
          jvm_max_memory: ${{ inputs.jvm_max_memory }}

          # Code signing method. Default is v1. Supported values: v1, v2
          signing_method: ${{ inputs.signing_method }}
