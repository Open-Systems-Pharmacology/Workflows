name: 'Run Evaluation Report'
description: 'Run and report the evaluation or qualification of PBPK model. '
author: 'pchelle'

inputs:
  model-repo: 
    description: 'Name of Github OSP repository from which to get the Model'
    required: true
  model-version:
    description: 'Tag or branch version of the model OSP repository'
    required: true
    default: '1.0'
  snapshot:
    description: 'For evaluation, name of the snapshot (.json) file. For simple qualification, name of the directory to create.'
    required: true
  evaluation:
    description: 'Does the script run an evaluation ?'
    required: false
    default: 'true'
  workflow-script:
    description: 'Path of workflow R script that creates the function to run the qualification if not default'
    required: false
  additional-project-urls:
    description: 'URL of additional project snapshots to export as pksim5 projects'
    required: false
  pk-sim-version: 
    description: 'Version of PK-Sim'
    required: false
    default: '11.3.208'
  qualification-framework-version:
    description: 'Version of the Qualification Framework'
    required: false
    default: '3.2'
  save-model-file:
    description: 'Save pksim5 model file'
    required: true
    default: 'false'
  save-pdf:
    description: 'Save evaluation report as PDF'
    required: true
    default: 'true'
  save-word:
    description: 'Save evaluation report as word document'
    required: true
    default: 'false'
  run-directory:
    description: 'Directory path where to download and run workflow'
    required: false
    default: 'D:/0'

runs:
  using: "composite"
  steps:
    - id: setup-run-directory
      name: Set up the run directory
      run: |
        dir.create("${{ inputs.run-directory }}")
      shell: Rscript {0}
    
    - id: setup-repo
      name: Setup Working Directory for Evaluation
      uses: Open-Systems-Pharmacology/Workflows/.github/actions/downloader@main
      with:
        repo: ${{ inputs.model-repo }}
        version: ${{ inputs.model-version }}
        extract-path: ${{ inputs.run-directory }}/${{ inputs.snapshot }}
    
    - id: run-evaluation
      name: Run evaluation
      run: |
        qualificationRunnerFolder <- normalizePath("QualificationRunner/QualificationRunner", winslash = "/")
        pkSimPortableFolder <- normalizePath("PK-Sim/PK-Sim", winslash = "/")
        workingDirectory <- normalizePath("${{ inputs.run-directory }}/${{ inputs.snapshot }}", winslash = "/")
        # Load library and clear simulation cache in case
        library(ospsuite.reportingengine)
        ospsuite::clearMemory(clearSimulationsCache = TRUE)
        versionInfo <- QualificationVersionInfo$new(
          "${{ inputs.model-version }}",
          paste(head(unlist(strsplit("${{ inputs.pk-sim-version }}", "\\.")), 2), collapse = "."), 
          "${{ inputs.qualification-framework-version }}"
        )
        # Fetch createQualificationReport() function from qualificationPath
        setwd(workingDirectory)
        workflowScript <- "${{ inputs.workflow-script }}"
        qualificationPath <- ifelse(
          any(is.null(workflowScript), is.na(workflowScript), workflowScript %in% ""),
          # If note specified, use default evaluation/workflow.R
          list.files(recursive = TRUE, pattern = "workflow.R", full.names = TRUE, ignore.case = TRUE),
          workflowScript
          )
        source(qualificationPath)
        # Needs to be run from same directory as workflow.R
        setwd(dirname(qualificationPath))
        createQualificationReport(
          qualificationRunnerFolder = qualificationRunnerFolder,
          pkSimPortableFolder = pkSimPortableFolder,
          createWordReport = as.logical("${{ inputs.save-word }}"),
          versionInfo = versionInfo
          )
        # Clean up and keep only the final report
        setwd(workingDirectory)
        reportPaths <- list.files(pattern = "report.md", recursive = TRUE, full.names = TRUE, ignore.case = TRUE)
        isEvaluation <- as.logical("${{ inputs.evaluation }}")
        newReportPath <- ifelse(isEvaluation, "${{ inputs.snapshot }}_evaluation_report.md", "report.md")
        copyReport(
          from = tail(reportPaths, 1), 
          to = newReportPath, 
          copyWordReport = as.logical("${{ inputs.save-word }}")
        )
        unlink(dirname(qualificationPath), recursive = TRUE)
      shell: Rscript {0}

    - id: convert-to-pdf
      name: Convert to pdf
      run: |
        if(as.logical("${{ inputs.save-pdf }}")){
          workingDirectory <- normalizePath("${{ inputs.run-directory }}/${{ inputs.snapshot }}", winslash = "/")
          isEvaluation <- as.logical("${{ inputs.evaluation }}")
          reportPath <- file.path(
            workingDirectory,
            ifelse(isEvaluation, "${{ inputs.snapshot }}_evaluation_report.md", "report.md")
          )
          # Convert to html using css, TODO find a better permanent url to store css
          download.file(
            url = "https://raw.githubusercontent.com/Open-Systems-Pharmacology/Workflows/refs/heads/main/Data/osp.css",
            destfile = "osp.css"
          )
          knitr::pandoc(
            reportPath, 
            paste(
              "html", 
              "--embed-resources", 
              "--standalone", 
              "--mathjax",
              "--quiet",
              "-c \"osp.css\"",
              "-f gfm+tex_math_dollars"
              )
            )
          cmdLine <- paste(
            'chromehtml2pdf',
            paste0('--out="', gsub(pattern = ".md", ".pdf", reportPath), '"'),
            "--displayHeaderFooter true",
            "--format A4",
            "--printBackground true",
            "--marginTop 10mm",
            "--marginBottom 20mm",
            "--marginLeft 10mm",
            "--marginRight 10mm",
            '--headerTemplate "<span></span>"',
            '--footerTemplate "<p style=\\"text-align: center; margin: auto; font-size: 10px;\\"><span class=\\"pageNumber\\"></span>/<span class=\\"totalPages\\"></span></p>"',
            paste0('"', gsub(pattern = ".md", ".html", reportPath), '"')
          )
          system(cmdLine)
        }
      shell: Rscript {0}

    - id: save-model-files
      name: Convert to pksim5 model files
      run: |
        if(as.logical("${{ inputs.save-model-file }}")){
          workingDirectory <- normalizePath("${{ inputs.run-directory }}/${{ inputs.snapshot }}", winslash = "/")
          pkSimPath <- normalizePath("PK-Sim/PK-Sim/PKSim.CLI.exe", winslash = "/")
          cmdLine <- paste(
            pkSimPath,
            "snap",
            # Snapshot file <modelName>.json is in working directory
            "-i", workingDirectory,
            "-o", workingDirectory,
            "-p"
          )
          system(cmdLine)
          # For next step, remove potential json from working directory
          unlink(file.path(workingDirectory, "${{ inputs.snapshot }}.json"))
          additionalSnapshots <- ospsuite::toPathArray("${{ inputs.additional-project-urls }}")
          for(additionalSnapshot in additionalSnapshots){
            download.file(
              # Use Github raw.githubusercontent.com to download snapshot file
              file.path("https://raw.githubusercontent.com/Open-Systems-Pharmacology", additionalSnapshot), 
              # Keep only the last name of the path (eg <model name>_Pediatrics.json)
              destfile = file.path(workingDirectory, basename(additionalSnapshot))
            )
            system(cmdLine)
            unlink(file.path(workingDirectory, basename(additionalSnapshot)))
          }
        }
      shell: Rscript {0}

    - id: upload-failed-run
      name: Upload artifact if failed
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: failed-${{ inputs.snapshot }}
        path: |
          ${{ inputs.run-directory }}/**
